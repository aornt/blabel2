#!/usr/bin/perl
# B-Label's stand-alone printing part

# B-Label (C) 2011-2020 by Ari Sovij√§rvi <ari.sovijarvi@cleverbit.fi>
# Released under Perl artistic license.

use constant VERSION=>"v2.10 build 01";
use constant VERSIONDATE=>"2023-09-20";
use GD;
use Net::CUPS;
use Getopt::Long;
use Pod::Usage;
use File::Temp qw/tempfile/;
use warnings;

sub initialize {
  my $autocut=$_[0];
  my $tapetype=$_[1];

  my $output="";

  # algemene info
  # let op !
  # Printer is in P-Lite Mode, which is unsupported
  # Turn off P-Lite mode by changing switch from position EL to position E
  #
  # printer doet 180dpi, maximum 128px 
  # compression mode:
  # 4D 00 = disable compression
  # 4D 02 = enable packbits compression mode
  
  # 1B 69 52 01 = Select graphics transfer mode = Raster
  # 1B 69 61 01 = switch mode (0=esc/p, 1=raster mode) 
  #
  # empty line "\x5a"
  # print and advance tape, but do not cut "\x0c"
  #    chr(0x0C)  There are more pages to print, don't discharge
  
  # print and cut tape "\x1a"
  #    chr(0x1A) This is the last page, discharge.
  
  # Invalidate
  # Brother's specs require this, but all tested units reset well enough with
  # the initalize command below. YMMV.
  foreach (1..400) {
    $output=$output.chr(0x00);
  }

  # Initialize clears all data in buffer
  $output=chr(0x1B).'@';     # 1B 40 = ESC @ = INIT 

  # Return status mode (we don't really get to read it anywhere!)
  # Brother's documentation mentions this needs to be sent to the printer
  # before first print after initialize command.
  # Status info request  "\x1biS"=	 1B 69 53 = ESC i S 
  $output=$output.chr(0x1B).'iS';

  # Enable leading auto cut mode. Models with automatic cutters will cut off the
  # excess leading tape automatically.
  # The 7th bit of the last character controls it.
  if ($autocut) {
    $output=$output.chr(0x1B).'iM@';
  } else {
    $output=$output.chr(0x1B).'iM'.chr(0x00);
  }

  # Accidentally discovered: this turns on/off the default to cut after printing
  # each label, so you could print multiple jobs without autocutting at end.
  #  $output=$output.chr(0x1B).'iK'.chr(0x08);
  #  $output=$output.chr(0x1B).'iK'.chr(0x00);

  # Specify automatic margins
  # 1st parameter = pixels
  # 2nd parameters = pixels * 256
  $output=$output.chr(0x1B).'id'.chr(0x14).chr(0x00);

  return $output;
}

# Processes the image into Brother's raw format
# 0: GD image object
# 1: Quiet 0|1
# 2: Debug 0|1
sub processimage {

  my $wtest = 0;
    
  my $inputimage=$_[0];
  my $quiet=$_[1];
  my $debug=$_[2];
  my $tapetype=$_[3];
  my $inverse=$_[4];
  my $charcount;
  my $x;
  my $y;
  
  my $xpix;
  my $xa;
  my $xb;
  my @pixel=();
  my @inpixels=();
  my ($width,$height)=$inputimage->getBounds();
  my $pixelcount=0;
  my $pixelgroups;
  my $output="";
  my $outputtestline="";
  my $outputtestlinex="";
  my $outputtestlinelocation=1;
  my $prechrstr="";
  my $postchrstr="";
  
  my $postfillnum=0;
  my $postfillstr="";
  my $prefillnum=1;
  my $prefillstr="";
  my $imagenum=0;
  my $bytecount=0;
  my $maxbytecount=16;
  
  
  my $lblfillchr=chr(0x00);
  
  
  if ($inverse) {
     $lblfillchr=chr(0xFF);
  }
  
  #if (($height!=40) && ($height!=64) && ($height!=128)) {
  #  die("Only 40, 64 or 128 pixels tall pictures can be processed.");
  #}
  print "- tapetype: $tapetype\n" if not $quiet;
  if (!tapetype_check ($tapetype) ) {
      die("Only tape type 6mm, 9mm, 12mm, 18mm or 24mm can be printed.");
  }
  
  
  if ($tapetype eq "0") {
     $wtest=1;
     print "- THIS IS THE TEST MODE - \n" if not $quiet;
  } 
  else {
    if (($height!=32)  && ($height!=48) && ($height!=56) && ($height!=64) && ($height!=80) && ($height!=96) && ($height!=112) && ($height!=128) && ($height!=136)) {
      die("Only 32 (6mm) , 48 56 (9mm), 64 80 (12mm), 96 112 (18mm) or 128 136 (24mm) pixels tall pictures can be processed.");
    }
  }
  print "- Image file size: $width x $height\n" if not $quiet;

  for ($xpix=0; $xpix<$width; $xpix++) {
    # walk through the colums of pixels of the image
    # this image height should be a multiple of 8 pixels (58, 64, 72 etc)
    # pack the pixels in chars of 8 bits
    for ($y=0; $y<$height; $y++) {

      my $tmpcolor=$inputimage->getPixel($xpix, $y);
      my ($r, $g, $b)=$inputimage->rgb($tmpcolor);
      if ($r<150) { # it's B/W, so we only need to compare one value
        print "*" if $debug;
        $inpixels[$pixelcount]=1;
      } else {
        print " " if $debug;
        $inpixels[$pixelcount]=0;
      }

      $pixelcount++;

      if ($pixelcount==8) {
        push(@pixel, ord(pack('B8', $inpixels[0].$inpixels[1].$inpixels[2].$inpixels[3].$inpixels[4].$inpixels[5].$inpixels[6].$inpixels[7])));
        print "|" if $debug;
        @inpixels=();
        $pixelcount=0;
      }

    } # Y

    # 1230PC is a funny device. Its software thinks it's a 2430PC and it will happily print 128 pixel (24mm) wide
    # tape, but its printing head only has active parts in the middle. So if we're printing 12mm (or smaller) tapes
    # on either of the devices, we have to pad each line with 40 empty pixels so the device's logical printing area
    # actually hits the tape. The 6mm (40px) wide tape begins physically at the same spot as the 12mm tape, so the
    # margin is the same. We need no margin for the 24mm tape.
   # if (==40) {
   #   $output=$output.'G'.chr(($height/8)+4).chr(0x00).chr(0x00).chr(0x00).chr(0x00).chr(0x00);
   # } elsif ($height==64) {
   #   $output=$output.'G'.chr(($height/8)+4).chr(0x00).chr(0x00).chr(0x00).chr(0x00).chr(0x00);
   # } elsif ($height==128) {
   #   $output=$output.'G'.chr(($height/8)).chr(0x00);
   # } else {
   #   die("I don't know how we got here, but I don't know how to handle $height pixels tall picture.");
   # }
   
   
    # This maps the tape width from mm to pixels
    # Note that we use a 2 pixel (one in each side) margin,
    # the Brother driver uses a much wider margin.
    # 6=>42-2,
    # 9=>64-2,
    # 12=>84-2,
    # 18=>128-2,
    # 24=>128,
    # PIX_PER_MM => 7.0;
   

    # out  > 'G'.chr(@bytes).chr(0).$data;
    $postfillnum=0;
    $postfillstr="";

    $prefillnum=0;
    $prefillstr="";

    
    if ($wtest==1) {
        # $height 85
        # 85 / 8 = 10.65 + 4 = 14.64
        #my $tmpint = 14;
        #$output=$output.'G'.chr($tmpint).chr(0x00).chr(0x00).chr(0x00).chr(0x00).chr(0x00);
        
        my $tmpint = 16;
        
        $paddingA = 16 - ($height / 2) ; 	
        $paddingB = 16 - $height - $paddingA ;
        #------------
        $tmpint= int(($height/8)+4);
        $paddingA = 5;
        $paddingB = 0;
        $output=$output.'G'.chr($tmpint);
        
        print "- wtest -tmpint : ".$tmpint. " -height : ".$height." -paddingA : ".$paddingA." -paddingB : ".$paddingB." \n" if not $quiet;
        
         
        for (my $i = 1; $i< $paddingA; $i++) {
           $output=$output.$lblfillchr;
        }
        
        foreach (@pixel) {
            $output=$output.chr($_);
        }

        @pixel=();
        
        for (my $i = 1; $i< $paddingB; $i++) {
           $output=$output.$lblfillchr;
        }
        
        
        
    }
    else {  
        my $sizing_error=0;
        $imagenum = ($height/8);

        if ($tapetype eq "6" ) {
            if ($height==32) {
                # 6mm tape tested en is about right
                # 32/8 = 4
                $prefillnum=7;
                $postfillnum=2;

                #$prechrstr='G'.chr(($height/8)+6).$lblfillchr.$lblfillchr.$lblfillchr.$lblfillchr.$lblfillchr.$lblfillchr.$lblfillchr;
           # } elsif ($height==40) {
                # 6mm tape maximale hoogte
                # 40/8 = 5
           #     $prechrstr='G'.chr(($height/8)+5).$lblfillchr.$lblfillchr.$lblfillchr.$lblfillchr.$lblfillchr.$lblfillchr;
            } else {
                $sizing_error = 1;
            }
        }
        elsif ($tapetype eq "9" || $tapetype eq "9+") {
       
            if ($height==48) {
                # 9mm tape with bottom margin     
                $prefillnum=6;
                $postfillnum=2;
                #for ($xb=0; $xb<$prefillnum; $xb++) {
                   # filler bytes            
                #   $prefillstr=$prefillstr.$lblfillchr;
                #}
                #$bytecount=chr(($height/8)+ $prefillnum - 1 + $postfillnum);

                #$prechrstr='G'.$bytecount.$prefillstr;
                
                #for ($xa=0; $xa<$postfillnum; $xa++) {
                   # filler bytes at the end           
                #   $postfillstr=$postfillstr.$lblfillchr;
                #}
               
                
            } elsif ($height==56) {
                # 9mm tape full height       
                $prefillnum=6;
                $postfillnum=2;

                #$prechrstr='G'.chr(($height/8)+5).$lblfillchr.$lblfillchr.$lblfillchr.$lblfillchr.$lblfillchr.$lblfillchr;
            } else {
                $sizing_error = 1;
            }         
        }
        elsif ($tapetype eq "12" || $tapetype eq "12+" ) {
            if ($height==64) {
                $prefillnum=5;
                $postfillnum=2;

                # 12mm tape with top and bottom margin
                #$prechrstr='G'.chr(($height/8)+4).$lblfillchr.$lblfillchr.$lblfillchr.$lblfillchr.$lblfillchr;
            } elsif ($height==80) {
                # 12mm tape full height
                $prefillnum=4;
                $postfillnum=2;
                #$prechrstr='G'.chr(($height/8)+3).$lblfillchr.$lblfillchr.$lblfillchr.$lblfillchr;
            } else {
                $sizing_error = 1;
            }
        }      
        elsif ($tapetype eq "18" || $tapetype eq "18+" ) {            
            if ($height==96) {
                # 18mm tape not tested
                #96 / 8 = 12
                $prefillnum=3;
                $postfillnum=2;
                #$prechrstr='G'.chr(($height/8)+2).$lblfillchr.$lblfillchr.$lblfillchr;
            } elsif ($height==112) {
                # 18mm tape full height
                #112 / 8 = 14
                $prefillnum=2;
                $postfillnum=2;
                #$prechrstr='G'.chr(($height/8)+1).$lblfillchr.$lblfillchr;                
            } else {
                $sizing_error = 1;
            }
        }      
        elsif ($tapetype eq "24" ) {            
            if ($height==128) {
                # 24 mm tape tested and is oke (unchanged)
                # 128 / 8 = 16
                $prefillnum=1;
                $postfillnum=0;
                #$prechrstr='G'.chr(($height/8)).$lblfillchr;
           } else {
                $sizing_error = 1;
           }
        } 
        if ($sizing_error) {
           die("I don't know how we got here, but I don't know how to handle $height pixels tall picture at tapetype $tapetype");
        }
        
        for ($xb=0; $xb<$prefillnum; $xb++) {
            # filler bytes            
            $prefillstr=$prefillstr.$lblfillchr;
        }
        
        $postfillnum = $maxbytecount - $prefillnum - $imagenum;
        
        $bytecount=chr($imagenum + $prefillnum - 1 + $postfillnum);

        $prechrstr='G'.$bytecount.$prefillstr;
        
        for ($xa=0; $xa<$postfillnum; $xa++) {
            # filler bytes at the end           
            $postfillstr=$postfillstr.$lblfillchr;
        }    
        
        $output=$output.$prechrstr;
        $outputtestline=$outputtestline.$prechrstr;
        
        if ($outputtestlinelocation == $xpix) {
              $outputtestlinex=$outputtestlinex.$prechrstr;
        }                  
        
        foreach (@pixel) {
            $output=$output.chr($_);
            $outputtestline=$outputtestline.chr($_);
            if ($outputtestlinelocation == $xpix) {
                $outputtestlinex=$outputtestlinex.chr($_);
            }   
        }
        @pixel=();
        
        $output=$output.$postfillstr;
        $outputtestline=$outputtestline.$postfillstr;       
    }
    # print the hex version of the line
    print "- outputtestlinelocation: ".$xpix. " outputtestline1:". (unpack "H*", $outputtestline)."\n";
    $outputtestline="";
  #  die();
    print "\n" if $debug;
  } # X
  if ($wtest==1) {
    
     $output=$output."Z".chr(0x1A);
     print "- wtest - length(output) : ".length($output)." bytes\n" if not $quiet;
  }
  else {
    # A single linefeed is needed for the printer to begin the print job.
     $output=$output."Z".chr(0x1A);
  }
  
  print "- outputtestlinelocation: ".$outputtestlinelocation. " outputtestline1:". (unpack "H*", $outputtestlinex)."\n";
  
 #print "- outputtestlinelocation: ".$outputtestlinelocation. " outputtestline2:".("0x%*v2.2X\n", ' ', $outputtestline);
   
  # unpack "H*", "foobar"
  
  #print "- outputtestlinelocation: ".$outputtestlinelocation. " outputtestline:".$outputtestline."\n";
  
  print "- Finished, output size is ".length($output)." bytes\n" if not $quiet;
  return $output;
}


#======================
sub tapetype_check {
    my $this_tape_type=$_[0];
    if (($this_tape_type eq "6")  || ($this_tape_type eq "9") || ($this_tape_type eq "9+") || ($this_tape_type eq "12") ||($this_tape_type eq "12+") || ($this_tape_type eq "18") || ($this_tape_type eq "18+") || ($this_tape_type eq "24") ) {
       return 1;
    } 
    else {
       return 0;
    }
}

# Reads the file and prints it out.
# 0: Printer name
# 1: Image file
# 2: Autocut 0|1
# 3: Quiet 0|1
# 4: Debug 0|1
sub print_all {
  my $printer=$_[0];
  my $image=$_[1];
  my $autocut=$_[2];
  my $quiet=$_[3];
  my $debug=$_[4];
  my $tapetype=$_[5];
  my $inverse=$_[6];
  my $do_print = "1";
  
  print "blabel-print ".VERSION."\n\n" if not $quiet;

  print "> Printing from $image\n" if not $quiet;

  my $pngfile=FileHandle->new($image, "r");
  my $outputimage=GD::Image->newFromPng($pngfile);
  my $rawdata=&processimage($outputimage, $quiet, $debug, $tapetype,$inverse);

  if ($autocut) {
    print "- Autocut is enabled\n" if not $quiet;
  }
 

  (my $printdata, my $tempfilename)=tempfile('/tmp/blabel-print.XXXXXX');

  print "> Opening printer ".$printer."\n" if not $quiet;
  binmode $printdata;
  print $printdata &initialize($autocut, $tapetype);
  print $printdata $rawdata;
  close($printdata);
  
  # dummy print to spare tape
  $do_print = "1";
  if ($do_print == "1"){
    $cupsdest->printFile($tempfilename, "B-Label");
  } 
  else{
     print "- DUMMY-PRINT !! no data was sent to the printer ! \n" if not $quiet;
  }
  unlink($tempfilename);

  print "> Done!\n" if not $quiet;
}

# Check the command line parameters and print if everything's in order.
sub main {
  our $cups=Net::CUPS->new();

  my $filename="";
  my $targetprinter="";
  my $tapetype="";
  my $help=0;
  my $printerlist=0;
  my $autocut=0;
  my $quiet=0;
  my $debug=0;
  my $version=0;
  my $inverse=0;
  
  GetOptions("file:s" => \$filename,
             "printer:s" => \$targetprinter,
             "tapetype:s" => \$tapetype,
             "help" => \$help,
             "autocut" => \$autocut,
             "quiet" => \$quiet,
             "debug" => \$debug,
             "printerlist" => \$printerlist,
             "version" => \$version,
             "inverse" => \$inverse);

  if ($help) {
    pod2usage(1);
    exit;
  }

  if ($debug) {
    $quiet=0;
  }

  if ($printerlist) {
    my @printers=$cups->getDestinations();
    foreach my $printer (@printers) {
      my $printername=$printer->getName();
      print "$printername\n";
    }
    exit;
  }

  if ($targetprinter) {
    my @printers=$cups->getDestinations();

    if (! grep {$_->getName() eq $targetprinter} @printers) {
      print "The printer \"$targetprinter\" does not appear to be a correct CUPS destination on this system.\n";
      print "Printers available in this system are:\n\n";
      foreach my $printer (@printers) {
        my $printername=$printer->getName();
        print "$printername\n";
      }
      exit(1);
    } else {
      our $cupsdest=$cups->getDestination($targetprinter);
    }
  }

  if ($version) {
    print "blabel-print ".VERSION." (".VERSIONDATE.")\n";
    exit;
  }

  if ($filename) {
    if (! -f $filename) {
      print "The file \"$filename\" does not exist\n";
      exit(1);
    }
  }

  if (($filename) && ($targetprinter)) {
    &print_all($targetprinter, $filename, $autocut, $quiet, $debug, $tapetype,$inverse);
    exit;
  }

  pod2usage(1);
}

&main;

__END__

=pod

=head1 NAME

blabel-print

=head1 DESCRIPTION

Prints portable network graphics (.png) files to Brother PT-1230PC and PT-2430PC label printers.

=head1 SYNOPSIS

=over

=item B<--file=><path to a .PNG file>

Defines file name to be printed, required parameter

=item B<--printer=><printer defined in CUPS>

Defines printer name, required parameter

=item B<--autocut>

Cuts the excess leading tape on models with automatic cutter

=item B<--help>

List options

=item B<--quiet>

Supress output, except for error conditions

=item B<--printerlist>

Lists available printers

=item B<--version>

Show version information

=back

=head2 Typical usage example:

blabel-print --file=test-picture.png --printer=Brother_PT-2430PC

=cut
